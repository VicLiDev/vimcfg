snippet proc_paras "proc paras"
import argparse

def proc_paras():
    # 创建解析器
    parser = argparse.ArgumentParser(description="cmd paras proc demo")

    # 定义位置参数
    # 是必须参数，在命令行中必须提供对应的值，程序运行时会按照定义的顺序解析
    # 这些参数。
    # 定义方式：直接使用 add_argument，且不给参数名前加 - 或 -- 前缀。
    parser.add_argument("name", help="user name")  # 必需参数
    # 定义可选参数
    # 可选参数是带有 - 或 -- 前缀的参数，用户可以选择性地提供这些参数。它们通常
    # 有默认值，若未提供则使用默认值。
    parser.add_argument("--age", type=int, default=18, help="user age")  # 带默认值的可选参数
    parser.add_argument("--verbose", action="store_true", help="dump info")  # 布尔值开关
    # 无论通过哪个别名（如 -i、--input 或 -inp）指定参数，所有别名最终都会绑定
    # 到一个统一的属性名，通常是根据长选项名称自动生成（去掉前导的 -- 并将 - 转换为 _）
    parser.add_argument("-i","--input","--inp", help="input file")
    parser.add_argument("-o","--output","--out", help="output file")

    # 解析命令行参数
    args = parser.parse_args()

    return args

'''
if __name__ == "__main__":
    args = proc_paras()

    # 使用参数
    print(f"Hi, {args.name}!")
    print(f"Your age is: {args.age}")
    print(f"input  file: {args.input}")
    print(f"output file: {args.output}")
    if args.verbose:
        print("verbose was enabled")
'''
endsnippet


snippet read_file_to_list "read data to list" b
def read_file_to_list(filename):
    """逐行读取文件到列表中，不缓存整个文件"""
    lines = []
    with open(filename, 'r') as file:
        for line in file:
            lines.append(line.strip().split())
    return lines
endsnippet


snippet write_to_file "write data to file" b
def write_to_file(filename, data):
    """将数据写入文件"""
    with open(filename, 'w') as file:
        for line in data:
            file.write(line + '\n')
endsnippet


snippet run_command "run shell cmd" b
import subprocess

def run_command(command):
    """执行给定的 shell 命令并返回输出、错误和执行状态"""
    try:
        # 使用 subprocess.run() 执行命令
        result = subprocess.run(command, shell=True, check=True,
                                stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # 返回标准输出、标准错误和执行状态
        return result.stdout.strip(), result.stderr.strip(), result.returncode
    except subprocess.CalledProcessError as e:
        # 捕获并处理错误
        return e.stdout.strip(), e.stderr.strip(), e.returncode

'''
command = "echo \"hello\""
stdout, stderr, status = run_command(command)

# 输出命令的结果和状态
print("命令输出:\n", stdout)
print("错误输出:\n", stderr)
print("执行状态:", "成功" if status == 0 else f"失败 (状态码: {status})")
'''
endsnippet


snippet plotVal "plot val" b
import matplotlib.pyplot as plt
import numpy as np

global_color  = ['b', 'g', 'r', 'c', 'm', 'y', 'k']
global_marker = ['.', 'o', 'v', '^', '<', '1', '2', '3', '4', '8', ',']
global_line_s = ['-', '--', '-.', ':']
tab_loc_ha = ['center', 'right', 'left']
tab_loc_va = ['center', 'top', 'bottom', 'baseline', 'center_baseline']

def plotVal(fileNames, dataGrp, refLineEn = [False, False], refLine = [0, 0], \
            showName = False, showTag = False, showLine = False, calcAvg = False):
    if len(fileNames) != len(dataGrp):
        print("error: file cnt and data cnt is not equal")
        print("file cnt is %d data cnt is %d" % (len(fileNames), (len(dataGrp))))
        return

    fig = plt.figure()  # an empty figure with no Axes
    ax = fig.add_subplot()
    loopCnt = len(fileNames)

    for i in range(loopCnt):
        line_style = ['']
        if showLine == True:
            line_style = global_line_s
        x = list(range(len(dataGrp[i])))
        ax.plot(x, dataGrp[i], marker=global_marker[i%len(global_marker)], \
                color=global_color[i%len(global_color)], \
                linestyle=line_style[i%len(line_style)], \
                alpha=1/2, \
                label=fileNames[i])  # Plot some data on the axes.
        if showName == True:
            fname_plt_idx = int(len(x) / 2)
            fname_plt_point_x = x[fname_plt_idx]
            fname_plt_point_y = dataGrp[i][fname_plt_idx]
            plt.text(fname_plt_point_x, fname_plt_point_y, fileNames[i], \
                     fontsize=12, color=global_color[i%len(global_color)], \
                     ha="right", va="bottom")

        if showTag == True:
            for a, b in zip(x, dataGrp[i]):
                tab_loc_x = int(i / len(tab_loc_va))
                tab_loc_y = int(i % len(tab_loc_va))
                ax.text(a, b, (a, b), fontsize=10, ha=tab_loc_ha[tab_loc_x], \
                        va=tab_loc_va[tab_loc_y], color=global_color[i%len(global_color)])
        if calcAvg == True:
            avg = np.mean(dataGrp[i])
            plt.axhline(avg, color=global_color[i%len(global_color)], linestyle="dashdot", label="avg: "+str(avg))

        ax.legend()  # Add a legend.

    if refLineEn[0] == True:
        plt.axhline(refLine[0], linestyle='--', c='r')
    if refLineEn[1] == True:
        plt.axvline(refLine[1], linestyle='--', c='orangered')

    plt.show()

'''
fileNames = ["file1.txt", "file2.txt"]
mDataGrp = [[1, 2, 3, 4],
            [4, 3, np.nan, 2, 6]]
plotVal(fileNames, mDataGrp, refLineEn = [True, True], refLine = [2, 3], \
        showName = True, showTag = True, showLine = True, calcAvg = True)
'''
endsnippet
