============================================== 安装 ==============================================

Vundle: 插件管理
  https://github.com/VundleVim/Vundle.vim
  安装方法：git里有说明

junegunn/vim-plug: 插件管理，速度很快。但使用vimrc加载多个配置文件时可能会有问题。
  https://github.com/junegunn/vim-plug
  安装方法：git里有说明

vim-startify: Vim 启动界面
  https://github.com/mhinz/vim-startify
  安装方法：建议使用vim-plug安装，在.vimrc中加入描述，在vim命令模式执行PlugInstall即可。

ctrlp: 模糊搜索，快速定位文件
  https://github.com/kien/ctrlp.vim
  安装方法：建议使用vim-plug安装，在.vimrc中加入描述，在vim命令模式执行PlugInstall即可。

nerdtree : 文件目录树
  https://github.com/preservim/nerdtree
  安装方法：建议使用vim-plug安装，在.vimrc中加入描述，在vim命令模式执行PlugInstall即可。

YouCompleteMe：自动补全
  https://github.com/ycm-core/YouCompleteMe
  安装方法：1.建议使用vim-plug安装，在.vimrc中加入描述，在vim命令模式执行PlugInstall完成初步操作
          2.在~/.vim/plugged/YouCompleteMe目录下执行 python ./install.py --all
          3.安装过程中可能会因为缺少部分支持而失败，例如 golang、npm等，使用apt-get 安装即可
          4.如果下载失败可能需要代理

taglist：显示宏，函数等信息
  https://github.com/vim-scripts/taglist.vim
  安装方法：建议使用vim-plug安装，在.vimrc中加入描述，在vim命令模式执行PlugInstall即可。

ctags: apt 安装

cscope: apt 安装


============================================== 配置 ==============================================
见.vimrc

============================================== 操作 ==============================================

-------------------- NERDTree常用快捷键：

:NERDTree               新窗口中打开NERDTree

o.......在已有窗口中打开文件、目录或书签，并跳到该窗口
O.......递归打开选中 结点下的所有目录
C.......将选中目录或选中文件的父目录设为根结点
q.......关闭NerdTree窗口
双击......相当于按 o
t....... 在新Tab中打开选中文件/书签，并跳到新Tab
i.......split 一个新窗口打开选中文件，并跳到该窗口
p....... 跳到父结点
r.......递归刷新选中目录



// --切换工作台和目录
ctrl + w + w    光标自动在左右侧窗口切换
ctrl + w + r    移动当前窗口的布局位置
o       在已有窗口中打开文件、目录或书签，并跳到该窗口
t       在新 Tab 中打开选中文件/书签，并跳到新 Tab
T       在新 Tab 中打开选中文件/书签，但不跳到新 Tab
i       split 一个新窗口打开选中文件，并跳到该窗口
gi      split 一个新窗口打开选中文件，但不跳到该窗口
s       vsplit 一个新窗口打开选中文件，并跳到该窗口
gs      vsplit 一个新 窗口打开选中文件，但不跳到该窗口
!       执行当前文件
O       递归打开选中 结点下的所有目录
x       合拢选中结点的父目录
X       递归 合拢选中结点下的所有目录
e       Edit the current dif

双击    相当于 NERDTree-o
中键    对文件相当于 NERDTree-i，对目录相当于 NERDTree-e

D       删除当前书签

P       跳到根结点
p       跳到父结点
K       跳到当前目录下同级的第一个结点
J       跳到当前目录下同级的最后一个结点
k       跳到当前目录下同级的前一个结点
j       跳到当前目录下同级的后一个结点

C       将选中目录或选中文件的父目录设为根结点
u       将当前根结点的父目录设为根目录，并变成合拢原根结点
U       将当前根结点的父目录设为根目录，但保持展开原根结点
r       递归刷新选中目录
R       递归刷新根结点
m       显示文件系统菜单
cd      将 CWD 设为选中目录

I       切换是否显示隐藏文件
f       切换是否使用文件过滤器
F       切换是否显示文件
B       切换是否显示书签

q       关闭 NerdTree 窗口
?       切换是否显示 Quick Help

// --切换标签页
:tabnew [++opt选项] ［＋cmd］ 文件      建立对指定文件新的tab
:tabc   关闭当前的 tab
:tabo   关闭所有其他的 tab
:tabs   查看所有打开的 tab
:tabp   前一个 tab
:tabn   后一个 tab

标准模式下：
gT      前一个 tab
gt      后一个 tab

MacVim 还可以借助快捷键来完成 tab 的关闭、切换
cmd+w   关闭当前的 tab
cmd+{   前一个 tab
cmd+}   后一个 tab


-------------------- ctags

1. 安装完成之后，想要使用ctags，那么必须在你想要调试或者查看的代码目录中有tags文件，使用如下语句即可生成tags文件，当用户在当前目录中运行vi时，会自动载入此tags文件。
    $ ctags -R --c++-kinds=+p --fields=+iaS --extra=+q
      -R表示递归创建，也就包括源代码根目录（当前目录）下的所有子目录;
      --c++-kinds=+ps是为c/c+语言添加函数原型信息;
      --fields=+iaS是为标签添加继承信息（inheritance），访问控制信息（access）和函数特征（Signature）如参数表或原型等;
      --extra=+q是为类成员添加标签;
2. 假如你想让你当前目录文件中的函数名在其他目录中打开vim时也能被定位到的话，那么可以把当前目录的tags文件路径添加到~/.vimrc中，如下所示
   set tags+=/root/mit6.828/jos/tags

3. 如果是多个tags文件，可以通过设置tags选项来引入更多的tags文件。例如: :set tags=./tags, ./../tags, ./*/tags

   tags包括以下文件：
     #define定义的宏
     枚举型变量的值
     函数的定义、原型和声明
     名字空间（namespace）
     类型定义（typedefs）
     变量（包括定义和声明）
     类（class）、结构（struct）、枚举类型（enum）和联合（union）类
     结构和联合中成员变量或函数
   个人的理解，ctags能定位函数主要是将上述的信息存储到了tags文件中，当我们使用ctags一些命令时，它都会从设置tags路径中查找相应的值，然后跳转过去。下面的cscope同理。


-------------------- cscope

1. 首先在目录下建立cscope索引文件
    find -name '*.c' > cscope.file
    cscope -Rbkq -i cscope.file
    这个命令会生成三个文件：cscope.out, cscope.in.out, cscope.po.out。
    其中cscope.out是基本的符号索引，后两个文件是使用"-q"选项生成的，可以加快cscope的索引速度。
    上面所用到的命令参数，含义如下：
        -R: 在生成索引文件时，搜索子目录树中的代码
        -b: 只生成索引文件，不进入cscope的界面
        -k: 在生成索引文件时，不搜索/usr/include目录
        -q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
        -i: 指定生成cscope文件所需的源码文件
