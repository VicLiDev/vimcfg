snippet proc_paras "proc paras"
# init para, def val
cmd_name=""
cmd_age=0

function usage()
{
    echo "usage: \$0 [-n|--name <name>] [-a|--age <age>]"
}

function proc_paras()
{
    # 双中括号提供了针对字符串比较的高级特性，使用双中括号 [[ ]] 进行字符串比较时，
    # 可以把右边的项看做一个模式，故而可以在 [[ ]] 中使用正则表达式：
    # if [[ hello == hell* ]]; then
    #
    # 位置参数可以用shift命令左移。比如shift 3表示原来的\$4现在变成\$1，原来的\$5现在变成
    # \$2等等，原来的\$1、\$2、\$3丢弃，\$0不移动。不带参数的shift命令相当于shift 1。

    # proc cmd paras
    while [[ \$# -gt 0 ]]; do
        key="\$1"
        case \${key} in
            -n|--name)
                cmd_name="\$2"
                shift # move to next para
                ;;
            -a|--age)
                cmd_age="\$2"
                shift # move to next para
                ;;
            *)
                # unknow para
                echo "unknow para: \${key}"
                usage
                exit 1
                ;;
        esac
        shift # move to next para
    done

    # check para
    [ -z "\$cmd_name" ] && { usage; exit 1; }
    [ "\$cmd_age" -eq 0 ] && { usage; exit 1; }

    # print result
    echo "======> cmd paras <======"
    echo "name : \$cmd_name"
    echo " age : \$cmd_age"
    echo
}


proc_paras \$@
endsnippet
